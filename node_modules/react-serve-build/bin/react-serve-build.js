#!/usr/bin/env node
/* eslint-disable arrow-parens */
/* eslint-disable quotes */
/* eslint-disable no-console */
const fs = require("fs");
const url = require("url");
const path = require("path");
const http = require("http");
const mime = require("mime");

const server = () => {
  // CLI arguments
  const rootBuild = "./build";
  const fileBuild = "index.html";
  const port = 8080;
  const cwd = process.cwd();

  let index;

  // Try put the root file in memory
  try {
    const uri = path.join(process.cwd(), rootBuild, fileBuild);
    index = fs.readFileSync(uri);
  } catch (e) {
    process.exit();
  }

  function sendError(res) {
    res.writeHead(500);
    res.write("500 Server Error");
    res.end();
  }

  function sendNotFound(res) {
    res.writeHead(404);
    res.write("404 Not Found");
    res.end();
  }

  function sendFile(res, uri, data) {
    res.writeHead(200, { "Content-Type": mime.getType(uri) });
    res.write(data, "binary");
    res.end();
  }

  // Server utility functions
  function readFile(res, uri) {
    fs.readFile(uri, "binary", (err, file) => {
      if (err) sendError(res);
      else sendFile(res, uri, file);
    });
  }

  function sendIndex(res, status) {
    if (process.env.NODE_ENV !== "production") {
      const uri = path.join(process.cwd(), rootBuild, fileBuild);
      index = fs.readFileSync(uri);
    }
    res.writeHead(status, { "Content-Type": "text/html" });
    res.write(index);
    res.end();
  }

  function isRouteRequest(uri) {
    return (
      uri
        .split("/")
        .pop()
        .indexOf(".") === -1
    );
  }

  // Starting the server
  http
    .createServer((req, res) => {
      const uri = url.parse(req.url).pathname;
      const resource = path.join(cwd, rootBuild, decodeURI(uri));
      // A route was requested
      if (isRouteRequest(uri)) {
        sendIndex(res, uri === "/" ? 200 : 301);
        return;
      }
      // A file was requested
      fs.stat(resource, err => {
        if (err === null) {
          readFile(res, resource);
        } else {
          sendNotFound(res);
        }
      });
    })
    .listen(parseInt(port, 10));

  console.log("----------------------------------------------");
  console.log(`[OK] Serving static files from ./${rootBuild}`);
  console.log(`[OK] Using the fallback file ${fileBuild}`);
  console.log(`[OK] Listening on http://localhost:${port}`);
  console.log("----------------------------------------------");
};

server();
